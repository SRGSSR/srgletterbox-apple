# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# This is the minimum version number required.
fastlane_version "1.95.0"

default_platform :ios

platform :ios do
  before_all do |lane|
    ensure_git_status_clean

    # For the demo, before all, check if we have a demo release description
    if lane.to_s == "demo"
      build_number = get_build_number
      marketing_version = getMarketingVersion
      tag_version = marketing_version + '-' + build_number

      whatsNewForDemo = getWhatsNewForDemo(tag_version: tag_version)
      if whatsNewForDemo.empty?
        UI.user_error!("Whoops, there is no demo release note in the WhatsNew-demo.json file for " + tag_version)
      end
    end

    Dir.chdir("..") do
      sh "make bootstrap"
    end
  end

  desc "Run library tests"
  lane :tests do
    scan(
      scheme: "SRGLetterbox",
      output_types: "",
      fail_build: false,
      clean: true
    )
    trainer(output_directory: "./fastlane")
  end

  desc "Build a new nightly demo on App Center"
  lane :nightly do

    appCenterBuildNumber = getAppCenterBuildNumber
    increment_build_number(
      build_number: appCenterBuildNumber + 1
    )

    changelog = default_changelog_for_nightlies

    branch_name = sh "git branch | grep \\* | cut -d ' ' -f2"

    bundle_display_name_suffix = " ðŸŒ™"
    marketing_version_suffix = "-nightly"
    if (branch_name.include? 'feature/')
      bundle_display_name_suffix = " ðŸŒ¿"
      marketing_version_suffix = marketing_version_suffix + '-' + branch_name.sub('feature/', '').strip
    end

    build_lane(
      configuration: "Nightly",
      scheme: "SRGLetterbox-demo",
      bundle_display_name_suffix: bundle_display_name_suffix,
      marketing_version_suffix: marketing_version_suffix
    )

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_DESTINATIONS'],
      notes: changelog
    )

    clean_build_artifacts

    merakiPushApps

    saveLastNightliesSuccessGitCommitHash
    
  end

  desc "Build a new demo on App Center with the current build number. You are responsible to tag the library version and bump the build number after."
  lane :demo do

    build_number = get_build_number
    marketing_version = getMarketingVersion
    tag_version = marketing_version + '-' + build_number

    whatsNewForDemo = getWhatsNewForDemo(tag_version: tag_version)

    build_lane(
      configuration: "Release",
      scheme: "SRGLetterbox-demo"
    )

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_RELEASE_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_RELEASE_APPCENTER_DESTINATIONS'],
      notes: whatsNewForDemo
    )

    clean_build_artifacts

    merakiPushApps

    print "You are responsible to tag the library version and bump the build number after."
  end

  desc "Build for a scheme and a configuration"
  private_lane :build_lane do |options|
    scheme = options[:scheme]
    configuration = options[:configuration]
    bundle_display_name_suffix = options[:bundle_display_name_suffix] ? options[:bundle_display_name_suffix] : ""
    marketing_version_suffix = options[:marketing_version_suffix] ? options[:marketing_version_suffix] : ""

    # resetProvisioningProfileContext

    # app_identifier = getAppIdentifier(scheme: scheme, configuration: configuration)
    # get_provisioning_profile(app_identifier: app_identifier, force: true, development: true)
    # get_provisioning_profile(app_identifier: app_identifier, force: true)

    xcargs = 'ENABLE_BITCODE=NO BUNDLE_DISPLAY_NAME_SUFFIX="' + bundle_display_name_suffix + '" MARKETING_VERSION_SUFFIX="' + marketing_version_suffix + '" -allowProvisioningUpdates'

    gym(
      configuration: configuration,
      scheme: scheme,
      silent: true,
      clean: true,
      xcargs: xcargs,
      export_method: "enterprise",
      include_bitcode: false
    )
  end

  desc "Upload a build on App Center"
  private_lane :appcenter_lane do |options|
    appname = options[:appname]
    destinations = options[:destinations]
    notes = options[:notes]

    appcenter_upload(
      api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
      owner_type: "organization",
      owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
      app_name: appname,
      release_notes: notes,
      destination_type: "group",
      destinations: destinations,
      notify_testers: false
    )
  end

  desc "Returns a default changelog for nightlies"
  private_lane :default_changelog_for_nightlies do

    lastNightliesGitCommitHash = getLastNightliesSuccessGitCommitHash
    if lastNightliesGitCommitHash.length < 12
      lastNightliesGitCommitHash = "HEAD^^^^^"
    end

    changelog = changelog_from_git_commits(
        between: [lastNightliesGitCommitHash, "HEAD"],
        pretty: "- %s"
    )
    # HAX: strip emoji from changelog
    changelog = (changelog) ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '') : "No change log found for this build."
    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
    puts changelog
    changelog
  end

  desc "Return current build number on App Center"
  private_lane :getAppCenterBuildNumber do
    appCenterBuildNumber = (sh "scripts/appcenter-build-number.sh -t #{ENV['LETTERBOX_DEMO_APPCENTER_TOKEN']} #{ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_SECRET']}")
    appCenterBuildNumber = Integer(appCenterBuildNumber.lines.map(&:chomp).last)
    puts appCenterBuildNumber
    appCenterBuildNumber
  end

  desc "Save the git commit hash in a local text file for nightlies"
  private_lane :saveLastNightliesSuccessGitCommitHash do
    last = last_git_commit
    puts last[:commit_hash]
    File.open("last-nightlies-success-git-commit-hash.txt", 'w') {|f| f.write(last[:commit_hash]) }
    last[:commit_hash]
  end

  desc "Read the git commit hash in a local text file for nightlies"
  private_lane :getLastNightliesSuccessGitCommitHash do
    file = File.open("last-nightlies-success-git-commit-hash.txt", "a+")
    lastNightliesSuccessGitCommitHash = file.read
    file.close
    puts lastNightliesSuccessGitCommitHash
    lastNightliesSuccessGitCommitHash
  end

  desc "Return the marketing version, without suffix"
  private_lane :getMarketingVersion do
     marketing_version = sh 'cd ..; xcodebuild -showBuildSettings | grep "MARKETING_VERSION =" | tr -d " =" | sed "s/MARKETING_VERSION//"'
     marketing_version = marketing_version.lines.last.gsub(/\s+/, "")
     marketing_version
  end

  desc "Return the bundle app identifier"
  private_lane :getAppIdentifier do |options|
     app_identifier = sh 'cd ..; xcodebuild -scheme "' + options[:scheme] + '" -configuration "' + options[:configuration] + '" -showBuildSettings | grep "PRODUCT_BUNDLE_IDENTIFIER =" | tr -d " =" | sed "s/PRODUCT_BUNDLE_IDENTIFIER//"'
     app_identifier = app_identifier.lines.last.gsub(/\s+/, "")
     app_identifier
  end

  desc "Return the what's new text from WhatsNew-demo.json file in the repository"
  private_lane :getWhatsNewForDemo do |options|
    tag_version = options[:tag_version]
    file = File.open("../WhatsNew-demo.json", "r")  
    json = JSON.parse(file.read)
    file.close
    whatsNew = json[tag_version]
    whatsNew ? whatsNew : ''
  end

  desc "Reset provisioning profile context to prepare a new build"
  private_lane :resetProvisioningProfileContext do
    lane_context.delete(SharedValues::SIGH_PROFILE_PATHS)
    lane_context.delete(SharedValues::SIGH_PROFILE_PATH)
    lane_context.delete(SharedValues::SIGH_UDID)
    lane_context.delete(SharedValues::SIGH_UUID)
    lane_context.delete(SharedValues::SIGH_NAME)
    lane_context.delete(SharedValues::SIGH_PROFILE_TYPE)
  end

  desc "Try to push new apps on registered devices with Meraki"
  private_lane :merakiPushApps do
    file = File.open("../Configuration/Scripts/merakiPushApps.sh", "r")
    merakiPushApps = file.read
    file.close
    sh merakiPushApps
  end

  after_all do |lane|
    reset_git_repo(skip_clean: true)

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    clean_build_artifacts
    reset_git_repo(skip_clean: true, force: true)
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
