# frozen_string_literal: true

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# This is the minimum version number required.
fastlane_version '2.201.0'

default_platform :ios

platform :ios do
  before_all do |lane|
    # For the demo, before all, check if we have a demo release description
    if lane.to_s.downcase.end_with? 'demo'
      what_s_new = what_s_new_for_demo
      if what_s_new.empty?
        UI.user_error!("Whoops, WhatsNew-demo.json has no release note for #{tag_version}.")
      end
    end

    ensure_git_status_clean unless lane.to_s.downcase.include? 'dsym'

    xcversion(version: '~> 13')
  end

  desc 'Run library tests'
  lane :tests do
    clean_result_files
    clean_derived_data

    iphone11 = Device.new('iOS', 'iPhone 11')
    appletv = Device.new('tvOS', 'Apple TV')
    devices = [iphone11, appletv]

    scheme = swift_package_name
    swift_package_tests = TestBuild.new(scheme, '', false)
    test_builds = [swift_package_tests]

    # Run all tests on various simulators
    srg_run_tests(devices, test_builds)

    # Produce JUnit files for CI
    srg_trainer
    override_junit_test_suite_names(test_builds)
  end

  desc 'Build a new iOS nightly demo on App Center'
  lane :iOSnightly do
    platform = 'iOS'

    appcenter_build_number = latest_appcenter_build_number(
      ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_APPNAME']
    )

    nightly(
      platform: platform,
      current_build_number: appcenter_build_number
    )

    changelog = default_changelog_for_nightlies(platform)

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_DESTINATIONS'],
      notes: changelog
    )

    clean_build_artifacts

    save_last_nightlies_success_git_commit_hash(platform)
  end

  desc 'Build a new tvOS nightly demo on AppStore Connect and wait build processing.'
  lane :tvOSnightly do
    platform = 'tvOS'

    update_app_identifier_to_appstore

    appstore_build_number = srg_latest_testflight_build_number(platform)

    nightly(
      platform: platform,
      current_build_number: appstore_build_number,
      export_to_appstore: true
    )

    changelog = default_changelog_for_nightlies(platform)

    srg_pilot(platform, changelog)

    appcenter_appname = ENV['LETTERBOX_DEMO_TVOS_NIGHTLY_APPCENTER_APPNAME']
    update_dsyms(platform, appcenter_appname, nil)

    clean_build_artifacts

    save_last_nightlies_success_git_commit_hash(platform)
  end

  desc 'Send latest tvOS nightly dSYMs to App Center, with optional \'version\' or \'min_version\' parameters.'
  lane :tvOSnightlyDSYMs do |options|
    appcenter_appname = ENV['LETTERBOX_DEMO_TVOS_NIGHTLY_APPCENTER_APPNAME']
    update_dsyms('tvOS', appcenter_appname, options)
  end

  desc 'Build a new iOS demo on App Center with the current build number. You are responsible to tag the library and bump the version (and the build number).'
  lane :iOSdemo do
    platform = 'iOS'

    demo(
      platform: platform
    )

    changelog = what_s_new_for_demo

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_IOS_RELEASE_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_IOS_RELEASE_APPCENTER_DESTINATIONS'],
      notes: changelog,
      notify_testers: true
    )

    clean_build_artifacts

    UI.important('You are responsible to tag the library and bump the version (and the build number).')
  end

  desc 'Build a new tvOS demo on AppStore Connect and wait build processing. You are responsible to tag the library and bump the version (and the build number) after.'
  lane :tvOSdemo do
    platform = 'tvOS'

    can_upload = can_upload_testflight_build(platform, nil)
    UI.message("SRGLetterbox-demo (Build #{xcode_current_project_version}) already uploaded üîÅ ‚úÖ") unless can_upload
    next unless can_upload

    update_app_identifier_to_appstore

    demo(
      platform: platform,
      export_to_appstore: true
    )

    changelog = what_s_new_for_demo

    srg_pilot(platform, changelog)

    appcenter_appname = ENV['LETTERBOX_DEMO_TVOS_RELEASE_APPCENTER_APPNAME']
    update_dsyms(platform, appcenter_appname, nil)

    clean_build_artifacts

    UI.important('You are responsible to tag the library and bump the version (and the build number).')
  end

  desc 'Send latest tvOS demo dSYMs to App Center, with optional \'version\' or \'min_version\' parameters.'
  lane :tvOSdemoDSYMs do |options|
    appcenter_appname = ENV['LETTERBOX_DEMO_TVOS_RELEASE_APPCENTER_APPNAME']
    update_dsyms('tvOS', appcenter_appname, options)
  end

  desc 'Common stuff to build a new nightly demo.'
  private_lane :nightly do |options|
    platform = options[:platform] || 'iOS'
    export_to_appstore = options[:export_to_appstore] || false
    current_build_number = options[:current_build_number]

    override_current_project_version(current_build_number + 1)

    branch_name = git_branch_name

    notify_build_number_to_ci(nightly_build_name_suffix(branch_name))

    clean_derived_data

    build_lane(
      configuration: 'Nightly',
      scheme: 'SRGLetterbox-demo',
      display_name_suffix: nighlty_display_name_suffix(branch_name),
      version_suffix: nightly_version_suffix(branch_name),
      build_name_suffix: nightly_build_name_suffix(branch_name),
      platform: platform,
      export_to_appstore: export_to_appstore
    )
  end

  desc 'Common stuff to build a new demo.'
  private_lane :demo do |options|
    platform = options[:platform] || 'iOS'
    export_to_appstore = options[:export_to_appstore] || false

    notify_build_number_to_ci(nil)

    clean_derived_data

    build_lane(
      configuration: 'Release',
      scheme: 'SRGLetterbox-demo',
      platform: platform,
      export_to_appstore: export_to_appstore
    )
  end

  desc 'Build for a scheme and a configuration'
  private_lane :build_lane do |options|
    options[:export_to_appstore] ||= false
    options[:display_name_suffix] ||= ''
    options[:version_suffix] ||= ''
    options[:build_name_suffix] ||= ''
    options[:platform] ||= 'iOS'
    options[:version] = xcode_marketing_version

    options = update_options_to_appstore(options)

    options[:team_id] = app_config.try_fetch_value(:team_id)

    destination = "generic/platform=#{options[:platform]}"
    lane_name = lane_context[SharedValues::LANE_NAME]
    output_directory = "fastlane/export/#{lane_name}/"
    gym(
      workspace: 'Demo/SRGLetterbox-demo.xcworkspace',
      configuration: options[:configuration],
      scheme: options[:scheme],
      silent: true,
      clean: true,
      xcargs: srg_xcargs(options),
      export_method: options[:export_to_appstore] ? 'app-store' : 'enterprise',
      include_bitcode: options[:export_to_appstore],
      export_team_id: options[:team_id],
      destination: destination,
      derived_data_path: srg_xcodebuild_derived_data_path,
      output_directory: output_directory
    )
  end

  desc 'Upload a build on App Center or just a dSYM file.'
  private_lane :appcenter_lane do |options|
    options[:notify_testers] ||= false

    if options[:upload_dsym]
      appcenter_upload(
        api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        upload_dsym_only: true,
        dsym: options[:upload_dsym]
      )
    else
      appcenter_upload(
        api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
        owner_type: 'organization',
        owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
        app_name: options[:appname],
        release_notes: options[:notes],
        destination_type: 'group',
        destinations: options[:destinations],
        notify_testers: options[:notify_testers]
      )
    end
  end

  after_all do |lane|
    reset_git_repo(skip_clean: true) unless lane.to_s.downcase.include? 'dsym'
  end

  error do |lane|
    unless lane.to_s.downcase.include? 'dsym'

      clean_build_artifacts
      reset_git_repo(skip_clean: true, force: true)
    end
  end
end

def app_config
  CredentialsManager::AppfileConfig
end

def can_upload_testflight_build(platform, app_identifier)
  platform ||= 'iOS'
  app_identifier ||= app_config.try_fetch_value(:app_identifier)

  login_with_app_store_connect_api_key
  appstore_build_number = latest_testflight_build_number(
    platform: appstore_platform(platform),
    app_identifier: app_identifier
  )
  local_build_number = xcode_current_project_version

  (appstore_build_number < local_build_number.to_i)
end

# Characters "-" or "+" in version are not allowed on AppStore Connect.
def update_options_to_appstore(options)
  return options unless options[:export_to_appstore]

  options[:version_suffix] = ''
  version = options[:version]
  index = version.index('-')
  return options unless index

  suffix = version[index..version.length - 1]
  options[:build_name_suffix] = suffix + options[:build_name_suffix]
  options[:version] = version[0..index - 1]
  options
end

def srg_xcargs(options)
  export_to_appstore = options[:export_to_appstore] || false
  xcargs = export_to_appstore ? 'ENABLE_BITCODE=YES' : 'ENABLE_BITCODE=NO'
  xcargs += " BUNDLE_DISPLAY_NAME_SUFFIX='#{options[:display_name_suffix]}'"
  xcargs += " MARKETING_VERSION='#{options[:version]}'"
  xcargs += " MARKETING_VERSION_SUFFIX='#{options[:version_suffix]}'"
  xcargs += " BUILD_NAME_SUFFIX='#{options[:build_name_suffix]}'"
  xcargs += " DEVELOPMENT_TEAM='#{options[:team_id]}'"
  "#{xcargs} -allowProvisioningUpdates"
end

def nighlty_display_name_suffix(branch_name)
  nighlty_display_name_suffix = ' üåô'
  nighlty_display_name_suffix = ' üåø' if branch_name.include? 'feature/'
  nighlty_display_name_suffix
end

def nightly_version_suffix(branch_name)
  nightly_version_suffix = '-nightly'
  if branch_name.include? 'feature/'
    nightly_version_suffix += "+#{branch_name.sub('feature/', '').strip}"
  end
  nightly_version_suffix
end

def nightly_build_name_suffix(branch_name)
  nightly_build_name_suffix = ''
  if branch_name.include? 'feature/'
    nightly_build_name_suffix = "+#{branch_name.sub('feature/', '').strip}"
  end
  nightly_build_name_suffix
end

# Returns a default changelog for nightlies
def default_changelog_for_nightlies(platform)
  last_commit_hash = last_nightlies_success_git_commit_hash(platform)
  last_commit_hash = 'HEAD^^^^^' if last_commit_hash.length < 12

  changelog = changelog_from_git_commits(
    between: [last_commit_hash, 'HEAD'],
    pretty: '- %s'
  )

  # HAX: strip emoji from changelog
  changelog = changelog ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '').lstrip : ''
  changelog = 'No change log found for this build.' if changelog.length.zero?
  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
end

# Returns current build number on App Center
def latest_appcenter_build_number(app_name)
  appcenter_hash = appcenter_fetch_version_number(
    api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
    owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
    app_name: app_name
  )

  Integer(appcenter_hash['build_number'])
end

# Returns current build number on AppStore Connect
def srg_latest_testflight_build_number(platform)
  login_with_app_store_connect_api_key
  latest_testflight_build_number(platform: appstore_platform(platform))
end

# Save the git commit hash in a local text file for nightlies
def save_last_nightlies_success_git_commit_hash(platform)
  last = last_git_commit
  unique_file = platform ? "#{platform.downcase}-" : ''
  file_name = "last-#{unique_file}nightlies-success-git-commit-hash.txt"
  File.write(file_name, last[:commit_hash])
  last[:commit_hash]
end

# Read the git commit hash in a local text file for nightlies
def last_nightlies_success_git_commit_hash(platform)
  unique_file = platform ? "#{platform.downcase}-" : ''
  file_name = "last-#{unique_file}nightlies-success-git-commit-hash.txt"
  file = File.open(file_name, 'a+')
  nightlies_success_git_commit_hash = file.read
  file.close
  nightlies_success_git_commit_hash
end

# Returns the marketing version, without suffix
def xcode_marketing_version
  marketing_version = nil
  Dir.chdir('../Demo') do
    command = 'xcodebuild -showBuildSettings | grep "MARKETING_VERSION ="'
    marketing_version = xcodebuid_grep_output sh command
  end
  marketing_version['MARKETING_VERSION ='] = ''
  marketing_version.gsub(/\s+/, '').chomp
end

# Returns the current project version
def xcode_current_project_version
  version = nil
  Dir.chdir('../Demo') do
    command = 'xcodebuild -showBuildSettings | grep "CURRENT_PROJECT_VERSION ="'
    version = xcodebuid_grep_output sh command
  end
  version['CURRENT_PROJECT_VERSION ='] = ''
  version.gsub(/\s+/, '').chomp
end

# Return current tag version
def tag_version
  build_number = xcode_current_project_version
  marketing_version = xcode_marketing_version
  "#{marketing_version}-#{build_number}"
end

# Return the what's new text from WhatsNew-demo.json file in the repository
def what_s_new_for_demo
  file = File.open('../WhatsNew-demo.json', 'r')
  json = JSON.parse(file.read)
  file.close
  what_s_new = json[tag_version]
  what_s_new || ''
end

# Update only the demo app identifier for App Store Connect submit.
def update_app_identifier_to_appstore
  update_app_identifier(
    xcodeproj: 'Demo/SRGLetterbox-demo.xcodeproj',
    plist_path: 'Info.plist'
  )
end

def srg_pilot(platform, changelog)
  login_with_app_store_connect_api_key
  pilot(
    app_platform: appstore_platform(platform),
    changelog: changelog,
    distribute_external: true,
    demo_account_required: false,
    beta_app_review_info: beta_app_review_info,
    groups: ENV['ITUNES_CONNECT_TESTFLIGHT_GROUPS']
  )
end

# Update dSYMs from AppStore to App Center.
def update_dsyms(platform, appcenter_appname, options)
  platform ||= 'iOS'
  min_version = options ? options[:min_version] : nil
  version = options ? options[:version] : nil
  output_directory = "fastlane/export/#{lane_context[SharedValues::LANE_NAME]}"
  Dir.chdir('..') { FileUtils.mkdir_p(output_directory) }

  download_appstore_dsyms(platform, min_version, version, output_directory)
  upload_appcenter_dsyms(appcenter_appname)

  lane_context.delete(SharedValues::DSYM_PATHS)
end

def download_appstore_dsyms(platform, min_version, version, output_directory)
  platform ||= 'iOS'
  version ||= 'latest'

  login_with_app_store_connect_api_key
  download_dsyms(
    platform: appstore_platform(platform),
    min_version: min_version,
    version: min_version ? nil : version,
    output_directory: output_directory,
    wait_for_dsym_processing: true,
    wait_timeout: 90
  )
end

def upload_appcenter_dsyms(appcenter_appname)
  lane_context[SharedValues::DSYM_PATHS]&.each do |dsym|
    appcenter_lane(
      appname: appcenter_appname,
      notes: 'DSYMs from AppStore Connect (via fastlane).',
      upload_dsym: dsym
    )
  end
end

# Override common current project version
def override_current_project_version(build_number)
  set_xcconfig_value(
    path: 'Demo/Demo.xcconfig',
    name: 'CURRENT_PROJECT_VERSION',
    value: build_number.to_s
  )
end

# Returns the library scheme
def xcode_library_scheme
  scheme = nil
  Dir.chdir('..') do
    command = 'xcodebuild -list | grep "Schemes:" -A 1'
    scheme = xcodebuid_grep_output sh command
  end
  scheme.gsub(/\s+/, '').chomp
end

# Returns clean xcodebuid grep output, without warning and errors
def xcodebuid_grep_output(output)
  line_count = output.lines.count
  output.split(/\n/) [line_count - 1]
end

# Share build number to the continuous integration
def notify_build_number_to_ci(suffix)
  return unless ENV['TEAMCITY_VERSION']

  suffix ||= ''

  displayed_build_number = xcode_marketing_version
  displayed_build_number += "-#{xcode_current_project_version}"
  displayed_build_number += suffix
  puts "##teamcity[buildNumber '#{displayed_build_number}']"
end

def git_branch_name
  sh "git branch | grep \\* | cut -d ' ' -f2"
end

def beta_app_review_info
  {
    contact_email: ENV['ITUNES_CONNECT_REVIEW_EMAIL'],
    contact_first_name: ENV['ITUNES_CONNECT_REVIEW_FIRST_NAME'],
    contact_last_name: ENV['ITUNES_CONNECT_REVIEW_LAST_NAME'],
    contact_phone: ENV['ITUNES_CONNECT_REVIEW_PHONE']
  }
end

def appstore_platform(platform)
  appstore_platforms = { 'iOS' => 'ios', 'tvOS' => 'appletvos' }
  appstore_platforms[platform]
end

def login_with_app_store_connect_api_key
  app_store_connect_api_key(
    key_id: ENV['SRGSSR_APPSTORE_CONNECT_API_KEY_ID'],
    issuer_id: ENV['SRGSSR_APPSTORE_CONNECT_API_KEY_ISSUER_ID'],
    key_content: ENV['SRGSSR_APPSTORE_CONNECT_API_KEY_CONTENT']
  )
end

Device = Struct.new :platform, :name
TestBuild = Struct.new :scheme, :scheme_suffix, :in_workspace

def swift_package_name
  JSON.parse((sh 'swift package dump-package'))['name']
end

def clean_result_files
  Dir['*.xml'].each { |file| File.delete(file) }
  FileUtils.remove_entry('xcresult', true)
end

def clean_derived_data
  Dir.chdir('..') { FileUtils.remove_entry(srg_xcodebuild_derived_data_path, true) }
end

def srg_run_tests(devices, test_builds)
  devices.each do |device|
    test_builds.each do |test_build|
      srg_xcodebuild(device, test_build)
    rescue StandardError => e
      raise e unless e.message.include? '** TEST FAILED **'

      UI.important("One or more tests failed on #{device.platform} (#{srg_xcodebuild_scheme(test_build)}). ‚ö†Ô∏è")
    end
  end
end

def srg_xcodebuild(device, test_build)
  xcodebuild(
    test: true,
    workspace: srg_xcodebuild_workspace(test_build),
    scheme: srg_xcodebuild_scheme(test_build),
    destination: srg_xcodebuild_destination(device),
    result_bundle_path: srg_xcodebuild_result_bundle_path(device, test_build),
    derivedDataPath: srg_xcodebuild_derived_data_path
  )
end

def srg_xcodebuild_workspace(test_build)
  test_build.in_workspace ? "Tests/#{srg_xcodebuild_scheme(test_build)}.xcworkspace" : nil
end

def srg_xcodebuild_scheme(test_build)
  test_build.scheme + test_build.scheme_suffix
end

def srg_xcodebuild_destination(device)
  "platform=#{device.platform} Simulator,name=#{device.name}"
end

def srg_xcodebuild_result_bundle_path(device, test_build)
  "#{result_bundle_folder_path}#{test_build.scheme}-#{device.platform}"
end

def srg_xcodebuild_derived_data_path
  '.build/DerivedData'
end

# Convert xcresults to JUnit files
def srg_trainer
  trainer(
    path: result_bundle_folder_path,
    output_directory: './fastlane',
    fail_build: false
  )
end

def result_bundle_folder_path
  './fastlane/xcresult/'
end

# Override JUnit test suite names to split iOS and tvOS test results
def override_junit_test_suite_names(test_builds)
  test_builds.each do |test_build|
    Dir["#{test_build.scheme}-*.xml"].each do |file_name|
      override_junit_test_suite_name(file_name)
    end
  end
end

def override_junit_test_suite_name(file_name)
  platform = file_name.split('.').first.split('-').last
  file = File.open(file_name, 'r')
  xml = file.read.gsub('Tests" tests="', "-#{platform}\" tests=\"")
  xml = xml.gsub('-tests" tests="', "-#{platform}\" tests=\"")
  File.write(file_name, xml)
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
