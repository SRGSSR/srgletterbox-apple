# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# This is the minimum version number required.
fastlane_version "2.96.0"

default_platform :ios

platform :ios do
  before_all do |lane|
    ensure_git_status_clean

    # For the demo, before all, check if we have a demo release description
    if lane.to_s == "demo"
      build_number = get_build_number
      marketing_version = getMarketingVersion
      tag_version = marketing_version + '-' + build_number

      whatsNewForDemo = getWhatsNewForDemo(tag_version)
      if whatsNewForDemo.empty?
        UI.user_error!("Whoops, there is no demo release note in the WhatsNew-demo.json file for " + tag_version)
      end
    end

    Dir.chdir("..") do
      sh "make bootstrap"
    end
  end

  desc "Run library tests"
  lane :tests do
    scan(
      scheme: "SRGLetterbox",
      output_types: "",
      fail_build: false,
      clean: true
    )
    trainer(output_directory: "./fastlane")
  end

  desc "Build a new iOS nightly demo on App Center"
  lane :iOSnightly do

    platform = "iOS"

    appCenterBuildNumber = getAppCenterBuildNumber
    increment_build_number(
      build_number: appCenterBuildNumber + 1
    )

    nightly(
      platform: platform
    )

    changelog = default_changelog_for_nightlies(platform)

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_DESTINATIONS'],
      notes: changelog,
    )

    clean_build_artifacts

    saveLastNightliesSuccessGitCommitHash
  end

  desc "Build a new tvOS nightly demo on AppStore Connect"
  lane :tvOSnightly do

    platform = "tvOS"

    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    appStoreBuildNumber = latest_testflight_build_number(
      team_id: team_id,
      app_identifier: app_identifier,
      platform: "appletvos"
    )
    increment_build_number(
      build_number: appStoreBuildNumber + 1
    )

    update_app_identifier(
      app_identifier: ENV['NIGHLTY_APP_IDENTIFIER'],
      plist_path: "Demo/Info.plist"
    )

    nightly(
      platform: platform,
      marketing_version_suffix: "",
      export_to_appstore: true
    )

    changelog = default_changelog_for_nightlies(platform)
    

    pilot(
      app_platform: "appletvos",
      skip_waiting_for_build_processing: true
    )

    clean_build_artifacts

    saveLastNightliesSuccessGitCommitHash

  end

  desc "Build a new iOS nightly demo on App Center"
  private_lane :nightly do |options|
    platform = options[:platform]
    export_to_appstore = options[:export_to_appstore] ? options[:export_to_appstore] : false
    override_marketing_version_suffix = options[:marketing_version_suffix]

    branch_name = sh "git branch | grep \\* | cut -d ' ' -f2"

    bundle_display_name_suffix = " ðŸŒ™"
    marketing_version_suffix = "-nightly"
    if (branch_name.include? 'feature/')
      bundle_display_name_suffix = " ðŸŒ¿"
      marketing_version_suffix = marketing_version_suffix + '+' + branch_name.sub('feature/', '').strip
    end

    if override_marketing_version_suffix
      marketing_version_suffix = override_marketing_version_suffix
    end

    build_lane(
      configuration: "Nightly",
      scheme: "SRGLetterbox-demo",
      bundle_display_name_suffix: bundle_display_name_suffix,
      marketing_version_suffix: marketing_version_suffix,
      platform: platform,
      export_to_appstore: export_to_appstore
    )
  end

  desc "Build a new iOS demo on App Center with the current build number. You are responsible to tag the library version and bump the build number after."
  lane :demo do

    build_number = get_build_number
    marketing_version = getMarketingVersion
    tag_version = marketing_version + '-' + build_number

    whatsNewForDemo = getWhatsNewForDemo(tag_version)

    build_lane(
      configuration: "Release",
      scheme: "SRGLetterbox-demo",
      platform: "iOS"
    )

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_RELEASE_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_RELEASE_APPCENTER_DESTINATIONS'],
      notes: whatsNewForDemo,
      notify_testers: true
    )

    clean_build_artifacts

    print "You are responsible to tag the library version and bump the build number after."
  end

  desc "Build for a scheme and a configuration"
  private_lane :build_lane do |options|
    scheme = options[:scheme]
    configuration = options[:configuration]
    export_to_appstore = options[:export_to_appstore] ? options[:export_to_appstore] : false
    bundle_display_name_suffix = options[:bundle_display_name_suffix] ? options[:bundle_display_name_suffix] : ""
    marketing_version_suffix = options[:marketing_version_suffix] ? options[:marketing_version_suffix] : ""
    platform = options[:platform] ? options[:platform] : "iOS"

    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    enable_bitcode_arg = export_to_appstore ? "ENABLE_BITCODE=YES" : "ENABLE_BITCODE=NO"
    xcargs = enable_bitcode_arg + ' BUNDLE_DISPLAY_NAME_SUFFIX="' + bundle_display_name_suffix + '" MARKETING_VERSION_SUFFIX="' + marketing_version_suffix + '" DEVELOPMENT_TEAM="' + team_id + '" -allowProvisioningUpdates'

    destination = "generic/platform=" + platform

    gym(
      configuration: configuration,
      scheme: scheme,
      silent: true,
      clean: true,
      xcargs: xcargs,
      export_method: export_to_appstore ? "app-store" : "enterprise",
      include_bitcode: export_to_appstore,
      export_team_id: team_id,
      destination: destination
    )
  end

  desc "Upload a build on App Center"
  private_lane :appcenter_lane do |options|
    appname = options[:appname]
    destinations = options[:destinations]
    notes = options[:notes]
    notify_testers = options[:notify_testers] ? options[:notify_testers] : false

    appcenter_upload(
      api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
      owner_type: "organization",
      owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
      app_name: appname,
      release_notes: notes,
      destination_type: "group",
      destinations: destinations,
      notify_testers: notify_testers
    )
  end

  # Returns a default changelog for nightlies
  def default_changelog_for_nightlies(platform)

    lastNightliesGitCommitHash = getLastNightliesSuccessGitCommitHash(platform)
    if lastNightliesGitCommitHash.length < 12
      lastNightliesGitCommitHash = "HEAD^^^^^"
    end

    changelog = changelog_from_git_commits(
        between: [lastNightliesGitCommitHash, "HEAD"],
        pretty: "- %s"
    )
    # HAX: strip emoji from changelog
    changelog = (changelog) ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '') : "No change log found for this build."
    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
    puts changelog
    changelog
  end

  # Return current build number on App Center
  def getAppCenterBuildNumber()
    appCenterBuildNumber = (sh "scripts/appcenter-build-number.sh -t #{ENV['LETTERBOX_DEMO_APPCENTER_TOKEN']} #{ENV['LETTERBOX_DEMO_NIGHTLY_APPCENTER_SECRET']}")
    appCenterBuildNumber = Integer(appCenterBuildNumber.lines.map(&:chomp).last)
    appCenterBuildNumber
  end

  # Save the git commit hash in a local text file for nightlies
  def saveLastNightliesSuccessGitCommitHash()
    last = last_git_commit
    puts last[:commit_hash]
    File.open("last-nightlies-success-git-commit-hash.txt", 'w') {|f| f.write(last[:commit_hash]) }
    last[:commit_hash]
  end

  # Read the git commit hash in a local text file for nightlies
  def getLastNightliesSuccessGitCommitHash(platform)
    platformPrefix = platform ? platform.downcase + "-" : ""
    file = File.open("last-" + platformPrefix + "nightlies-success-git-commit-hash.txt", "a+")
    lastNightliesSuccessGitCommitHash = file.read
    file.close
    lastNightliesSuccessGitCommitHash
  end

  # Return the marketing version, without suffix
  def getMarketingVersion()
     marketing_version = sh 'cd ..; xcodebuild -showBuildSettings | grep "MARKETING_VERSION =" | tr -d " =" | sed "s/MARKETING_VERSION//"'
     marketing_version = marketing_version.lines.last.gsub(/\s+/, "")
     marketing_version
  end

  # Return the bundle app identifier
  def getAppIdentifier(scheme, configuration)
     app_identifier = sh 'cd ..; xcodebuild -scheme "' + scheme + '" -configuration "' + configuration + '" -showBuildSettings | grep "PRODUCT_BUNDLE_IDENTIFIER =" | tr -d " =" | sed "s/PRODUCT_BUNDLE_IDENTIFIER//"'
     app_identifier = app_identifier.lines.last.gsub(/\s+/, "")
     app_identifier
  end

  # Return the what's new text from WhatsNew-demo.json file in the repository
  def getWhatsNewForDemo(tag_version)
    file = File.open("../WhatsNew-demo.json", "r")  
    json = JSON.parse(file.read)
    file.close
    whatsNew = json[tag_version]
    whatsNew ? whatsNew : ''
  end

  after_all do |lane|
    reset_git_repo(skip_clean: true)

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    clean_build_artifacts
    reset_git_repo(skip_clean: true, force: true)
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
