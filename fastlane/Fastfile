# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# This is the minimum version number required.
fastlane_version "2.96.0"

default_platform :ios

platform :ios do
  before_all do |lane|
    ensure_git_status_clean

    # For the demo, before all, check if we have a demo release description
    if lane.to_s.downcase.include? "demo"
      what_s_new = what_s_new_for_demo()
      if what_s_new.empty?
        UI.user_error!("Whoops, there is no demo release note in the WhatsNew-demo.json file for " + tag_version)
      end
    end

    Dir.chdir("..") do
      sh "make bootstrap"
    end
  end

  desc "Run library tests"
  lane :tests do
    scan(
      scheme: "SRGLetterbox",
      output_types: "",
      fail_build: false,
      clean: true
    )
    trainer(output_directory: "./fastlane")
  end

  desc "Build a new iOS nightly demo on App Center"
  lane :iOSnightly do
    build_platform = "iOS"

    appcenter_build_number = latest_appcenter_build_number(ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_SECRET'])

    nightly(
      platform: build_platform,
      current_build_number: appcenter_build_number
    )

    changelog = default_changelog_for_nightlies(build_platform)

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_IOS_NIGHTLY_APPCENTER_DESTINATIONS'],
      notes: changelog,
    )

    clean_build_artifacts

    save_last_nightlies_success_git_commit_hash(build_platform)
  end

  desc "Build a new tvOS nightly demo on AppStore Connect and wait build processing. Optional 'skip_waiting_for_build_processing' parameter."
  lane :tvOSnightly do |options|
    skip_waiting_for_build_processing = options[:skip_waiting_for_build_processing] ? options[:skip_waiting_for_build_processing] : false

    update_to_appstore_app_identifier

    build_platform = "tvOS"
    appstore_platform =  "appletvos"

    appstore_build_number = latest_testflight_build_number(platform: appstore_platform)

    nightly(
      platform: build_platform,
      current_build_number: appstore_build_number,
      export_to_appstore: true
    )

    changelog = default_changelog_for_nightlies(build_platform)

    pilot(
      app_platform: appstore_platform,
      skip_waiting_for_build_processing: skip_waiting_for_build_processing,
      changelog: changelog,
      distribute_external: true,
      groups: ENV['SRGSSR_ITUNES_CONNECT_GROUPS']
    )

    update_dsyms(appstore_platform, ENV['LETTERBOX_DEMO_TVOS_NIGHTLY_APPCENTER_APPNAME'])

    clean_build_artifacts

    save_last_nightlies_success_git_commit_hash(build_platform)
  end

  desc "Common stuff to build a new nightly demo."
  private_lane :nightly do |options|
    platform = options[:platform] ? options[:platform] : "iOS"
    export_to_appstore = options[:export_to_appstore] ? options[:export_to_appstore] : false
    current_build_number = options[:current_build_number]

    increment_build_number(
      build_number: current_build_number + 1
    )

    branch_name = sh "git branch | grep \\* | cut -d ' ' -f2"
    bundle_display_name_suffix = " ðŸŒ™"
    marketing_version_suffix = "-nightly"
    if (branch_name.include? 'feature/')
      bundle_display_name_suffix = " ðŸŒ¿"
      marketing_version_suffix = marketing_version_suffix + '+' + branch_name.sub('feature/', '').strip
    end

    build_lane(
      configuration: "Nightly",
      scheme: "SRGLetterbox-demo",
      bundle_display_name_suffix: bundle_display_name_suffix,
      marketing_version_suffix: marketing_version_suffix,
      platform: platform,
      export_to_appstore: export_to_appstore
    )
  end

  desc "Build a new iOS demo on App Center with the current build number. You are responsible to tag the library version and bump the build number after."
  lane :iOSdemo do
    build_platform = "iOS"

    demo(
      platform: build_platform
    )

    changelog = what_s_new_for_demo()

    appcenter_lane(
      appname: ENV['LETTERBOX_DEMO_IOS_RELEASE_APPCENTER_APPNAME'],
      destinations: ENV['LETTERBOX_DEMO_IOS_RELEASE_APPCENTER_DESTINATIONS'],
      notes: changelog,
      notify_testers: true
    )

    clean_build_artifacts

    print "You are responsible to tag the library version and bump the build number after."
  end

  desc "Build a new tvOS demo on AppStore Connect and wait build processing. Optional 'skip_waiting_for_build_processing' parameter. You are responsible to tag the library version and bump the build number after."
  lane :tvOSdemo do |options|
    skip_waiting_for_build_processing = options[:skip_waiting_for_build_processing] ? options[:skip_waiting_for_build_processing] : false

    update_to_appstore_app_identifier

    build_platform = "tvOS"
    appstore_platform =  "appletvos"

    demo(
      platform: build_platform,
      export_to_appstore: true
    )

    changelog = what_s_new_for_demo()

    pilot(
      app_platform: appstore_platform,
      skip_waiting_for_build_processing: skip_waiting_for_build_processing,
      changelog: changelog,
      distribute_external: true,
      groups: ENV['SRGSSR_ITUNES_CONNECT_GROUPS']
    )

    update_dsyms(appstore_platform, ENV['LETTERBOX_DEMO_TVOS_RELEASE_APPCENTER_APPNAME'])

    clean_build_artifacts

    print "You are responsible to tag the library version and bump the build number after."
  end

  desc "Common stuff to build a new demo."
  private_lane :demo do |options|
    platform = options[:platform] ? options[:platform] : "iOS"
    export_to_appstore = options[:export_to_appstore] ? options[:export_to_appstore] : false

    build_lane(
      configuration: "Release",
      scheme: "SRGLetterbox-demo",
      platform: platform,
      export_to_appstore: export_to_appstore
    )
  end

  desc "Build for a scheme and a configuration"
  private_lane :build_lane do |options|
    scheme = options[:scheme]
    configuration = options[:configuration]
    export_to_appstore = options[:export_to_appstore] ? options[:export_to_appstore] : false
    bundle_display_name_suffix = options[:bundle_display_name_suffix] ? options[:bundle_display_name_suffix] : ""
    marketing_version_suffix = options[:marketing_version_suffix] ? options[:marketing_version_suffix] : ""
    platform = options[:platform] ? options[:platform] : "iOS"

    # Characters "-" or "+" are not allowed on AppStore Connect.
    if export_to_appstore
      marketing_version_suffix = ""
    end

    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    enable_bitcode_arg = export_to_appstore ? "ENABLE_BITCODE=YES" : "ENABLE_BITCODE=NO"
    xcargs = enable_bitcode_arg + ' BUNDLE_DISPLAY_NAME_SUFFIX="' + bundle_display_name_suffix + '" MARKETING_VERSION_SUFFIX="' + marketing_version_suffix + '" DEVELOPMENT_TEAM="' + team_id + '" -allowProvisioningUpdates'

    destination = "generic/platform=" + platform

    output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME] + '/'

    # Workaround for ComScore packaging issue
    comscore_sh_file = "../Carthage/Build/" + platform + "/ComScore.framework/strip-framework.sh"
    File.delete(comscore_sh_file) if File.exist?(comscore_sh_file)

    # Workaround for missing TagCommander tvOS SDK: use iOS frameworks to build andd remove it for ipad package.
    fix_tc_frameworks = export_to_appstore

    if fix_tc_frameworks
      fix_tc_tvos_bootstrap
    end

    gym(
      configuration: configuration,
      scheme: scheme,
      silent: true,
      clean: true,
      xcargs: xcargs,
      export_method: export_to_appstore ? "app-store" : "enterprise",
      include_bitcode: export_to_appstore,
      export_team_id: team_id,
      destination: destination,
      output_directory: output_directory,
      skip_package_ipa: fix_tc_frameworks
    )

    if fix_tc_frameworks
      fix_tc_tvos_archive

      gym(
        skip_build_archive: true,
        archive_path: lane_context[SharedValues::XCODEBUILD_ARCHIVE],
        configuration: configuration,
        scheme: scheme,
        silent: true,
        export_method: export_to_appstore ? "app-store" : "enterprise",
        include_bitcode: export_to_appstore,
        export_team_id: team_id,
        output_directory: output_directory
      )
    end
  end

  desc "Upload a build on App Center or just a dSYM file."
  private_lane :appcenter_lane do |options|
    appname = options[:appname]
    destinations = options[:destinations]
    notes = options[:notes]
    notify_testers = options[:notify_testers] ? options[:notify_testers] : false
    upload_dsym = options[:upload_dsym]

    if upload_dsym
      appcenter_upload(
        api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
        owner_type: "organization",
        owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
        app_name: appname,
        release_notes: notes,
        upload_dsym_only: true,
        dsym: upload_dsym
      )
    else
      appcenter_upload(
        api_token: ENV['LETTERBOX_DEMO_APPCENTER_TOKEN'],
        owner_type: "organization",
        owner_name: ENV['LETTERBOX_DEMO_APPCENTER_OWNER'],
        app_name: appname,
        release_notes: notes,
        destination_type: "group",
        destinations: destinations,
        notify_testers: notify_testers
      )
    end
  end

  # Returns a default changelog for nightlies
  def default_changelog_for_nightlies(platform)

    last_commit_hash = last_nightlies_success_git_commit_hash(platform)
    if last_commit_hash.length < 12
      last_commit_hash = "HEAD^^^^^"
    end

    changelog = changelog_from_git_commits(
        between: [last_commit_hash, "HEAD"],
        pretty: "- %s"
    )
    # HAX: strip emoji from changelog
    changelog = (changelog) ? changelog.sub(/[\u{1F300}-\u{1F6FF}]/, '') : "No change log found for this build."
    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
    changelog
  end

  # Return current build number on App Center
  def latest_appcenter_build_number(app_secret)
    appCenterBuildNumber = (sh "scripts/appcenter-build-number.sh -t #{ENV['LETTERBOX_DEMO_APPCENTER_TOKEN']} " + app_secret)
    appCenterBuildNumber = Integer(appCenterBuildNumber.lines.map(&:chomp).last)
    appCenterBuildNumber
  end

  # Save the git commit hash in a local text file for nightlies
  def save_last_nightlies_success_git_commit_hash(platform)
    last = last_git_commit
    platformPrefix = platform ? platform.downcase + "-" : ""
    File.open("last-" + platformPrefix + "nightlies-success-git-commit-hash.txt", 'w') {|f| f.write(last[:commit_hash]) }
    last[:commit_hash]
  end

  # Read the git commit hash in a local text file for nightlies
  def last_nightlies_success_git_commit_hash(platform)
    platformPrefix = platform ? platform.downcase + "-" : ""
    file = File.open("last-" + platformPrefix + "nightlies-success-git-commit-hash.txt", "a+")
    lastNightliesSuccessGitCommitHash = file.read
    file.close
    lastNightliesSuccessGitCommitHash
  end

  # Return the marketing version, without suffix
  def xcode_marketing_version()
     marketing_version = sh 'cd ..; xcodebuild -showBuildSettings | grep "MARKETING_VERSION =" | tr -d " =" | sed "s/MARKETING_VERSION//"'
     marketing_version = marketing_version.lines.last.gsub(/\s+/, "")
     marketing_version
  end

  # Return the bundle app identifier
  def xcode_app_identifier(scheme, configuration)
     app_identifier = sh 'cd ..; xcodebuild -scheme "' + scheme + '" -configuration "' + configuration + '" -showBuildSettings | grep "PRODUCT_BUNDLE_IDENTIFIER =" | tr -d " =" | sed "s/PRODUCT_BUNDLE_IDENTIFIER//"'
     app_identifier = app_identifier.lines.last.gsub(/\s+/, "")
     app_identifier
  end

  # Return current tag version
  def tag_version()
    build_number = get_build_number
    marketing_version = xcode_marketing_version
    tag_version = marketing_version + '-' + build_number
    tag_version
  end

  # Return the what's new text from WhatsNew-demo.json file in the repository
  def what_s_new_for_demo()
    file = File.open("../WhatsNew-demo.json", "r")  
    json = JSON.parse(file.read)
    file.close
    whatsNew = json[tag_version]
    whatsNew ? whatsNew : ''
  end

  # Workaround for missing TagCommander tvOS SDKs: copy iOS frameworks for tvOS build.
  def fix_tc_tvos_bootstrap()
    source_platform = "iOS"
    destination_platform = "tvOS"

    tccore = "../Carthage/Build/%s/TCCore.framework"
    if !File.directory?(tccore % [destination_platform])
      FileUtils.copy_entry(tccore % [source_platform], tccore % [destination_platform])
    end

    tcsdk = "../Carthage/Build/%s/TCSDK.framework"
    if !File.directory?(tcsdk % [destination_platform])
      FileUtils.copy_entry(tcsdk % [source_platform], tcsdk % [destination_platform])
    end
  end

  # Workaround for missing TagCommander tvOS SDK: remove iOS frameworks in archive.
  def fix_tc_tvos_archive()
    xcodebuild_archive_frameworks = lane_context[SharedValues::XCODEBUILD_ARCHIVE] + "/Products/Applications/SRGLetterbox-demo.app/Frameworks"
    FileUtils.remove_entry(xcodebuild_archive_frameworks + "/TCCore.framework", force = true)
    FileUtils.remove_entry(xcodebuild_archive_frameworks + "/TCSDK.framework", force = true)    
  end

  # Update only the demo app identifier for App Store Connect submit.
  def update_to_appstore_app_identifier()
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    update_app_identifier(
      plist_path: "Demo/Info.plist"
    )
  end

  def update_dsyms(platform, appcenter_app_name)
    output_directory = 'fastlane/export/' + lane_context[SharedValues::LANE_NAME]

    download_dsyms(
      platform: platform,
      version: "latest",
      output_directory: output_directory
    )

    if lane_context[SharedValues::DSYM_PATHS]
      lane_context[SharedValues::DSYM_PATHS].each { |dSYM|
        appcenter_lane(
          appname: appcenter_app_name,
          notes: 'DSYMs from AppStore Connect (via fastlane).',
          upload_dsym: dSYM
        )
      }
    end
  end

  after_all do |lane|
    reset_git_repo(skip_clean: true)

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    clean_build_artifacts
    reset_git_repo(skip_clean: true, force: true)
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
